{"version":3,"sources":["redux/reducers/user.js","redux/reducers/rootReducer.js","api/userAPI.js","redux/sagas/userSaga.js","redux/actions/user.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["initialState","item","user","state","action","type","payload","rootReducer","combineReducers","fetchUserData","a","fetch","response","json","data","alert","getUserData","userSaga","call","put","results","console","log","takeEvery","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","App","useSelector","dispatch","useDispatch","useEffect","name","first","last","src","picture","large","alt","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAAMA,EAAe,CACjBC,KAAM,MAeKC,EAZF,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC3C,OAAQA,EAAOC,MACX,IAAK,WACD,OAAO,eACAF,EADP,CAEIF,KAAMG,EAAOE,UAGrB,QAAS,OAAOH,ICLTI,EAJKC,YAAgB,CAChCN,S,wCCJSO,EAAa,uCAAG,8BAAAC,EAAA,+EAEEC,MAAM,6BAFR,cAEfC,EAFe,gBAGFA,EAASC,OAHP,cAGfC,EAHe,yBAIdA,GAJc,kCAMrBC,MAAM,EAAD,IANgB,0DAAH,qD,WCIhBC,G,WAUeC,GAVzB,SAAUD,EAAYZ,GAAtB,uEAEqB,OAFrB,kBAE2Bc,YAAKT,GAFhC,OAGQ,OADMK,EAFd,gBAGcK,YCPqB,CAC/Bd,KAAM,WACNC,QDKsBQ,EAAKM,QAAQ,KAHvC,uDAMQC,QAAQC,IAAR,MANR,qDAUe,SAAUL,IAAV,iEACX,OADW,SACLM,YAAU,oBAAqBP,GAD1B,uCERf,IAAMQ,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAiBC,cAEjBC,EAAQC,YAAYxB,EAAaiB,EAAiBQ,YAAgBJ,KAExEA,EAAeK,IAAIhB,GAGJa,QCaAI,MAvBf,WACE,IAAMhC,EAAOiC,aAAY,qBAAGjC,KAAgBD,QAEtCmC,EAAWC,cAMjB,OAJAC,qBAAU,WACRF,EFLkC,CAClC/B,KAAM,wBEKL,IAGD,6BAEIH,GACA,6BACE,uCAASA,EAAKqC,KAAKC,MAAnB,YAA4BtC,EAAKqC,KAAKE,OACtC,6BAAK,yBAAKC,IAAKxC,EAAKyC,QAAQC,MAAOC,IAAI,YCR7BC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUrB,MAAOA,GACf,kBAAC,EAAD,OAEFsB,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.b83f9823.chunk.js","sourcesContent":["const initialState = {\r\n    item: null,\r\n}\r\n\r\nconst user = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                ...state,\r\n                item: action.payload,\r\n\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default user;","import { combineReducers } from 'redux';\r\nimport user from './user';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;","export const fetchUserData = async () => {\r\n    try {\r\n        const response = await fetch(\"https://randomuser.me/api\");\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (e) {\r\n        alert(e);\r\n    }\r\n};","import { call, put, takeEvery, } from \"redux-saga/effects\";\r\nimport { setUser } from '../actions/user';\r\nimport { fetchUserData } from '../../api/userAPI';\r\n\r\nfunction* getUserData(action) {\r\n    try {\r\n        const data = yield call(fetchUserData);\r\n        yield put(setUser(data.results[0]));\r\n\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield takeEvery('REQUEST_USER_DATA', getUserData);\r\n}","export const setUser = payload => ({\r\n    type: 'SET_USER',\r\n    payload,\r\n})\r\n\r\n\r\nexport const requestUserData = () => ({\r\n    type: 'REQUEST_USER_DATA',\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport userSaga from './sagas/userSaga';\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(userSaga);\r\n\r\n\r\nexport default store;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestUserData } from './redux/actions/user';\n\n\nfunction App() {\n  const user = useSelector(({ user }) => user.item);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(requestUserData())\n  }, [])\n\n  return (\n    <div>\n      {\n        user &&\n        <div>\n          <div>{`${user.name.first} ${user.name.last}`}</div>\n          <div><img src={user.picture.large} alt=\"pic\" /></div>\n        </div>\n      }\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport store from './redux/store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}